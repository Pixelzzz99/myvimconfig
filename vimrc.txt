set nocompatible


call plug#begin('~/AppData/Local/nvim/plugged')
" Дополнения для NERDTree

"floaterm terminal
Plug 'voldikss/vim-floaterm'

" Use release branch (recommend)
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" FuzzyFinder (для быстрого поиска)
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'

" NERDTree - быстрый просмотр файлов
Plug 'preservim/nerdtree'

"Plug 'honza/vim-snippets'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'scrooloose/nerdcommenter'

" Дополнение для Git, а также иконки для NERDTree
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'ryanoasis/vim-devicons'

" Линия статуса
Plug 'itchyny/lightline.vim'

" Тем:
Plug 'joshdick/onedark.vim'
Plug 'cocopon/iceberg.vim'
Plug 'mhartington/oceanic-next'
Plug 'phanviet/vim-monokai-pro'

" Проверка Синтаксиса
Plug 'scrooloose/syntastic'

" Поддержка Python
Plug 'klen/python-mode'

"line up down
Plug 'matze/vim-move'

"vertical line for functions blocks
Plug 'yggdroot/indentline'

"syntax highlight
Plug 'sheerun/vim-polyglot'

"cursorline
Plug 'sstallion/vim-cursorline'

"Formatter
Plug 'chiel92/vim-autoformat'

"Comfortable motion Vim
Plug 'yuttie/comfortable-motion.vim'

Plug 'pineapplegiant/spaceduck', { 'branch': 'main' }

Plug 'terryma/vim-multiple-cursors'

Plug 'mengelbrecht/lightline-bufferline'

call plug#end()
"FuzzyFinder
let g:ackprg='ag --vimgrep'

"formatter configuration
noremap <A-F> : Autoformat<CR>

"indentline configuration
let g:indentLine_char = '|'

"Move change
nmap <A-Up> <Plug>MoveLineUp
nmap <A-Down> <Plug>MoveLineDown
nmap <A-Left> <Plug>MoveCharLeft
nmap <A-Right> <Plug>MoveCharRight

vmap <A-Up> <Plug>MoveBlockUp
vmap <A-Down> <Plug>MoveBlockDown
vmap <A-Left> <Plug>MoveBlockLeft
vmap <A-Right> <Plug>MoveBlockRight


"Terminal floatterm
let g:floaterm_shell = 'powershell'
let g:floaterm_keymap_toggle = '<leader>'
let g:floaterm_keymap_new = '<leader>t'
let g:floaterm_width = 0.6
let g:floaterm_height = 0.4
let g:floaterm_position = 'bottomright'

tnoremap <Esc> <C-\><C-n>

" Обычные настройки вима
set tabstop=4
set shiftwidth=4
set expandtab
set clipboard+=unnamedplus
set mouse=a
set cursorline

" Активировать номера строк
set number
set ruler

" Делаем Vim более функциональным
set nocompatible
set t_Co=256
set nowrap

"В нормальном режиме Ctrl+n вызывает :NERDTree
nmap <TAB> :NERDTreeToggle<CR>
vmap ++ <plug>NERDCommenterToggle<CR>
nmap ++ <plug>NERDCommenterToggle<CR>

let g:NERDTreeGitStatusWithFlags = 1
let g:NERDTreeIgnore = ['^node_modules$']


" Тема для **NeoVim**
syntax on
set termguicolors
colorscheme iceberg

"Filesystem work on git
let $PATH = "C:\\Program Files\\Git\\usr\\bin;".$PATH
let g:fzf_preview_window = 'right:50%'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6  }  }
let $fzf_colors='ansi'
map ; :Files<CR>

let g:lightline#bufferline#show_number  = 1
"lightline status bar
let g:lightline = {
            \ 'colorscheme': 'iceberg',
            \ 'active': {
                \   'left': [ [ 'mode', 'paste' ],
                \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
                \ },
                \ 'component_function': {
                \   'gitbranch' : 'fugitive#head',
                \ }
                \ }

let g:lightline.tabline = {'left': [['buffers']], 'right': [['close']]}
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

" Настройка coc.nvim
set encoding=utf-8

let g:coc_global_extensions = [
            \ 'coc-snippets',
            \ 'coc-pairs',
            \ 'coc-tsserver',
            \ 'coc-eslint',
            \ 'coc-prettier',
            \ 'coc-json',
            \ 'coc-tabnine',
            \ 'coc-emmet',
            \ 'coc-cmake',
            \ 'coc-python',
            \ 'coc-html',
            \ 'coc-css'
            \ ]

inoremap <silent><expr> <TAB>
            \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
            \ coc#refresh()

function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~ '\s'
endfunction


set hidden
set nobackup
set nowritebackup

set cmdheight=1

set updatetime=300

nnoremap <silent>K : call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

